[preset.0]

name="tlbtc_demo"
platform="Web"
runnable=true
advanced_options=false
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter="env.txt"
exclude_filter=""
export_path="../../build/tlbtc_build/index.html"
encryption_include_filters=""
encryption_exclude_filters=""
encrypt_pck=false
encrypt_directory=false
script_export_mode=2

[preset.0.options]

custom_template/debug=""
custom_template/release=""
variant/extensions_support=false
variant/thread_support=false
vram_texture_compression/for_desktop=true
vram_texture_compression/for_mobile=false
html/export_icon=true
html/custom_html_shell=""
html/head_include="<script>
	// Variables to store audio data and context
	let audioChunks = [];
	let mediaRecorder;
	let audioBlob;
	let audioURL;
	let audioContext = new (window.AudioContext || window.webkitAudioContext)();
	let recognizedText = '';
	// Request microphone access and set up the recorder
	async function setupMicrophone() {
		try {
			const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
			mediaRecorder = new MediaRecorder(stream);

			mediaRecorder.ondataavailable = function(event) {
				audioChunks.push(event.data);
			};

			mediaRecorder.onstop = function() {
				audioBlob = new Blob(audioChunks, { 'type' : 'audio/wav; codecs=opus' });
				audioURL = URL.createObjectURL(audioBlob);
				audioChunks = [];
			};

			console.log(\"Microphone setup complete.\");
		} catch (error) {
			console.error(\"Error accessing microphone:\", error);
		}
	}

	// Start recording audio
	function startRecording() {
		if (mediaRecorder && mediaRecorder.state === \"inactive\") {
			mediaRecorder.start();
			console.log(\"Recording started...\");
		}
	}

	// Stop recording audio
	function stopRecording() {
		if (mediaRecorder && mediaRecorder.state === \"recording\") {
			mediaRecorder.stop();
			console.log(\"Recording stopped...\");
		}
	}

	// Play the recorded audio
	function playAudio() {
		if (audioURL) {
			const audio = new Audio(audioURL);
			audio.play();
			console.log(\"Playing recorded audio...\");
		} else {
			console.warn(\"No audio recorded yet.\");
		}
	}

	// Convert recorded audio to text (STT)
	function startListening() {
		const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
		recognition.lang = \"en-US\";
		recognition.continuous = true;
		recognition.interimResults = true;
		
		let silenceTimer = null;
		const SILENCE_DURATION = 2000; // 2 seconds, adjust as needed

	function resetSilenceTimer() {
		if (silenceTimer) clearTimeout(silenceTimer);
		silenceTimer = setTimeout(() => {
			console.log(\"Silence detected, stopping recognition\");
			recognition.stop();
			window.recognitionState = 'idle';
		}, SILENCE_DURATION);
	}
		
		recognition.onstart = function() {
		console.log(\"Speech recognition started\");
		window.recognitionState = 'listening';
		resetSilenceTimer();
		};
		
		recognition.onend = function() {
		console.log(\"Speech recognition ended\");
		window.recognitionState = 'idle';
		if (silenceTimer) clearTimeout(silenceTimer);
		// Optionally restart listening
		//recognition.start();
	};

		recognition.onresult = function(event) {
			resetSilenceTimer();
			//recognizedText = event.results[0][0].transcript;
			//console.log(\"Recognized Text:\", recognizedText);
			recognizedText = \"\";               // Clear previous results for fresh display
		for (let i = 0; i < event.results.length; i++) {
			recognizedText += event.results[i][0].transcript;
			}
			console.log(\"Recognized Text (real-time):\", recognizedText);
			window.recognizedText = recognizedText;
			
		};

		recognition.onerror = function(event) {
			console.error(\"Speech recognition error:\", event.error);
			window.recognitionState = 'error';
			if (silenceTimer) clearTimeout(silenceTimer);
		};

		recognition.start();
	}
	// Text-to-Speech (TTS) Function
    function speak() {
		console.log('tts called');
		const text=aiResponse;
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.voice = speechSynthesis.getVoices().find(voice => voice.name === \"Google US English\") || speechSynthesis.getVoices()[0];
		utterance.onstart = () => {
        console.log('Started speaking');
        window.ttsState = 'speaking';
    };

    utterance.onend = () => {
        console.log('Finished speaking');
        window.ttsState = 'idle';
    };

    utterance.onerror = (event) => {
        console.error('TTS Error:', event.error);
        window.ttsState = 'error';
    };
        speechSynthesis.speak(utterance);
    }
	// Function to stop speaking
function stopSpeaking() {
    const synth = window.speechSynthesis;
    synth.cancel();
    window.ttsState = 'idle';
}

// Function to pause speaking
function pauseSpeaking() {
    const synth = window.speechSynthesis;
    synth.pause();
    window.ttsState = 'paused';
}

// Function to resume speaking
function resumeSpeaking() {
    const synth = window.speechSynthesis;
    synth.resume();
    window.ttsState = 'speaking';
}

	window.ttsState='idle';
	window.setupMicrophone = setupMicrophone;
	window.startRecording = startRecording;
	window.stopRecording = stopRecording;
	window.playAudio = playAudio;
	window.startListening = startListening;
	window.recognizedText = recognizedText;
	window.speak=speak;
</script>"
html/canvas_resize_policy=2
html/focus_canvas_on_start=true
html/experimental_virtual_keyboard=false
progressive_web_app/enabled=false
progressive_web_app/ensure_cross_origin_isolation_headers=true
progressive_web_app/offline_page=""
progressive_web_app/display=1
progressive_web_app/orientation=0
progressive_web_app/icon_144x144=""
progressive_web_app/icon_180x180=""
progressive_web_app/icon_512x512=""
progressive_web_app/background_color=Color(0, 0, 0, 1)
